#!/usr/bin/env python

#--------------------------------------------------------------------------
class displayoutputs():
    def __init__(self):
        self.harness = {
        "pass" : "pass",
        "fail" : "fail",
        "startTest"                     : "\ntest begin                           ",
        "serialInitFail"                : "Serial Port Setup Failed",
        "blDecision"                    : "load code?                 (y/n) ",
        "startDecision"                 : "Press ENTER to start test...         ",
        "appJump"                       : "application jump                     ",
        "progBoot"                      : "programming bootloader(3-wire)       ",
        "progManuData"                  : "programming manudata(3-wire)         ",
        "progIrDABridge"                : "programming irda bridge(3-wire)      ",
        "progTCTestCode"                : "programming tracker test code        ",
        "progTCBootloader"              : "programming tracker bootloader       ",
        "progRailCont"                  : "programming rail controller          ",
        "progRailBase"                  : "programming rail baseboard(3-wire)   ",
        "bootApp"                       : "bootloading application(DUT)         ",
        "readManuData"                  : "reading manudata(3-wire)             ",
        "readT1"                        : "reading T1.txt(3-wire)               ",
        "progProdApp"                   : "loading production code(3-wire)      ",
        "programming"                   : "programming                          ",
        "testManuData"                  : "test manudata(DUT)                   ",
        "calibration"                   : "Calibration in progress...           ",
        "testing"                       : "Testing in progress...               ",
        "calRun"                        : "Calibration Run    ",
        "hardVersion"                   : "Hardware Version   ",
        "manuDate"                      : "Manufacturing Date ",
        "partNum"                       : "Part Number        ",
        "uuid"                          : "UUID               ",
        "softVersion"                   : "Software Version   ",
        "noRespSensorPack"              : "No response from Sensor Pack",
        "noRespPumpController"          : "No response from Pump Controller",
        "noRespInterconnect"            : "No response from Interconnect Board",
        "noRespTrackerController"       : "No response from Tracker Controller",
        "noRespRailController"          : "No response from Rail Controller",
        "noRespLaunchPad"               : "No response from LaunchPad",
        "noRespAgilent"                 : "No response from Aglient meter",
        "divideByZeroError"             : "divide by zero error",
        "resultPost"                    : "result post                          ",
        "resultPostFail"                : "result post failed, can't continue",
        "endTest"                       : "test end\n\n",
        "summaryPassed"                 : "summary                               passed",
        "summaryFailed"                 : "summary                               failed",
        "printDecision"                 : "\n\nopen testing report?                  (y/n) ",
        "testTerminated"                : "Test script has terminated. Please close this window and restart the test.",
        "starBorder" : "***************************************************************************"
        }
        self.serialComms = {
        "frameProcessError"             : "error while processing response",
        "sendFrameCount"                : "attempt #"
        }
        self.testerInfo = {
        "askUserID"                     : "Enter userid                          ",
        "askTesterID"                   : "Enter harness id                      ",
        "askPartNum"                    : "Enter the part number                 ",
        "askManuDate"                   : "Enter the manufacturing date          ",
        "askVersionInfo"                : "Enter the 3-digit version             ",
        "askVersionInfoRC"              : "Enter the 3-digit version(RC)         ",
        "askVersionInfoRB"              : "Enter the 3-digit version(RB)         ",
        "askProgPort"                   : "Enter LaunchPad comm port             ",
        "askCommPort"                   : "Enter Target Device comm port         ",
        "showUserID"                    : "userid                               ",
        "showTesterID"                  : "harness id                           ",
        "showPartNum"                   : "part number                          ",
        "showManuDate"                  : "manufacturing date                   ",
        "showVersionInfo"               : "3-digit version                      ",
        "showVersionInfoRC"             : "3-digit version(RC)                  ",
        "showVersionInfoRB"             : "3-digit version(RB)                  ",
        "showProgPort"                  : "LaunchPad comm port                  ",
        "showCommPort"                  : "DUT comm port                        ",
        "editValuesDecision"            : "Edit values?               (y/n) ",
        "calRunDecision"                : "Calibration run?           (y/n) ",
        }
        self.sp = {
        "reqDarkData"                   : "get sensor data - dark(DUT)          ",
        "reqIllumData"                  : "get sensor data - illum(DUT)         ",
        "testSunSensors - Dark"         : "test sun sensors - dark              ",
        "testSunSensors - Illum"        : "test sun sensors - illum             ",
        "lightOFF"                      : "illumination - OFF(Launchpad)        ",
        "lightON"                       : "illumination - ON(Launchpad)         ",
        "testAccel - Positive El"       : "test accel - Positive Elev(DUT)      ",
        "testAccel - Zero El"           : "test accel - Zero Elev(DUT)          ",
        "ssnwDarkData"                  : "ssnw - Dark ->                       ",
        "ssneDarkData"                  : "ssne - Dark ->                       ",
        "ssswDarkData"                  : "sssw - Dark ->                       ",
        "ssseDarkData"                  : "ssse - Dark ->                       ",
        "ssnwIllumData"                 : "ssnw - Illum ->                      ",
        "ssneIllumData"                 : "ssne - Illum ->                      ",
        "ssswIllumData"                 : "sssw - Illum ->                      ",
        "ssseIllumData"                 : "ssse - Illum ->                      ",
        "accelxZeroElData"              : "accelx - Zero Elev ->                ",
        "accelyZeroElData"              : "accely - Zero Elev ->                ",
        "accelzZeroElData"              : "accelz - Zero Elev ->                ",
        "accelxPosElData"               : "accelx - Positive Elev ->            ",
        "accelyPosElData"               : "accely - Positive Elev ->            ",
        "accelzPosElData"               : "accelz - Positive Elev ->            ",
        }
        self.pc = {
        "testTempIn"                    : "test temperature in(DUT)             ",
        "testFlow"                      : "test flow(DUT)                       ",
        "testTempOut"                   : "test temperature out(DUT)            ",
        "testPressure"                  : "test pressure(DUT)                   ",
        "testRelayControl"              : "test relay control(DUT/Launchpad)    ",
        "testSensorPower1"              : "test sensor power1(Launchpad)        ",
        "testSensorPower2"              : "test sensor power2(Launchpad)        ",
        "tempInData"                    : "tempIn ->                            ",
        "flowData"                      : "flow ->                              ",
        "tempOutData"                   : "tempOut ->                           ",
        "pressureData"                  : "pressure ->                          ",
        "vcc1Data"                      : "vcc1 ->                              ",
        "gnd1Data"                      : "gnd1 ->                              ",
        "vcc2Data"                      : "vcc2 ->                              ",
        "gnd2Data"                      : "gnd2 ->                              ",
        }
        self.ic = {
        "removeProgCable"               : "please remove programming cable. press ENTER to continue...",
        "attachProgCable"               : "please attach programming cable. press ENTER to continue...",
        "sendCalInfo"                   : "send calibration info(DUT)           ",
        "saveCalInfo"                   : "save calibration info(DUT)           ",
        "testModuleVoltages"            : "test module voltages                 ",
        "testModuleCurrent"             : "test module current                  ",
        "testBoardVCC"                  : "test board VCC                       ",
        "testBoardTemp"                 : "test board temperature               ",
        "measureV1"                     : "measuring voltage V1                 ",
        "measureV2"                     : "measuring voltage V2                 ",
        "measureV3"                     : "measuring voltage V3                 ",
        "measureV4"                     : "measuring voltage V4                 ",
        "measureR"                      : "measuring resistance R               ",
        "measureVR"                     : "measuring VR                         ",
        "m1VData" : "m1V -> ",
        "m2VData" : "m2V -> ",
        "m3VData" : "m3V -> ",
        "m4VData" : "m4V -> ",
        "pI1Data" : "pI1 -> ",
        "pI2Data" : "pI2 -> ",
        "pI3Data" : "pI3 -> ",
        "pI4Data" : "pI4 -> ",
        "pVData" : "pV -> ",
        "pTData" : "pT -> ",
        }
        self.tc = {
        "moveEast"                      : "test move east                       ",
        "moveWest"                      : "test move west                       ",
        "moveUp"                        : "test move up                         ",
        "moveDown"                      : "test move down                       ",
        "sensorPackComm"                : "test sensor pack comm                ",
        "interconnectComm"              : "test interconnect comm               ",
        "railComm"                      : "test rail comm                       ",
        "moduleTemps"                   : "test module temps                    ",
        }
        self.rc = {
        "rtcComms"                      : "test RTC comms                       ",
        "flashComms"                    : "test serial Flash comms              ",
        "rs485Comms"                    : "test RS485 comms                     ",
        "portVoltages"                  : "test port voltages                   ",
        "digitalInputs"                 : "test digital inputs                  ",
        "permissionInput"               : "test permission input                ",
        "estops"                        : "test estops                          ",
        "ethernet"                      : "test ethernet                        ",
        "irReceiver"                    : "test ir receiver                     ",
        "irPressPlay"                   : "press PLAY on IR remote              ",
        "testSysLED"                    : "test system LED                      ",
        "confSysLED"                    : "is the system LED changing between   ",
        "confSysLED2"                   : "Green, Red, and Blue? (y/n)         ",
        "testPortPowerLEDs"             : "test port power LEDs                 ",
        "portPowerLEDsShorts"           : "testing port LEDs for shorts...      ",
        "confPortPowerLEDs"             : "Do the power LEDs on ports 1,2,3,4   ",
        "confPortPowerLEDs2"            : "and 8 light up individually, one at  ",
        "confPortPowerLEDs3"            : "a time? (y/n)                       ",
        "testPortLEDsRed"               : "test port LEDs-red                   ",
        "confPortLEDsRed1"              : "Does each port LED light up RED,     ",
        "confPortLEDsRed2"              : "individually, one at a time? (y/n)  ",
        "testPortLEDsBlue"              : "test port LEDs-blue                  ",
        "confPortLEDsBlue1"             : "Does each port LED light up BLUE,    ",
        "confPortLEDsBlue2"             : "individually, one at a time? (y/n)  ",
        "testPortLEDsGreen"             : "test port LEDs-green                 ",
        "confPortLEDsGreen1"            : "Does each port LED light up GREEN,   ",
        "confPortLEDsGreen2"            : "individually, one at a time? (y/n)  ",
        "test7SegDisplays"              : "test 7-segment displays              ",
        "conf7SegDisplays1"             : "Does each segment of both 7-segment  ",
        "conf7SegDisplays2"             : "displays light up, individually,     ",
        "conf7SegDisplays3"             : "one at a time? (y/n)                ",
        "testAllIndicators"             : "test all indicators                  ",
        "confAllIndicators"             : "Are all indicators lit? (y/n)       ",
        }
#--------------------------------------------------------------------------
